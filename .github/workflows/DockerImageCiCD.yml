## GitHub Actions 대시보드에 표시될 워크플로 이름
name: Docker CI/CD
## 실행 시 "Deploy to [대상] by @사용자명" 형식으로 표시
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}

## 트리거 설정 (이벤트 발생 시 워크플로 실행)
on:
  push:
    branches: [ "main" ]  ## main 브랜치에 push 이벤트 발생 시 실행
#  pull_request:         ## 주석 해제 시 main 브랜치 PR 이벤트로도 실행
#    branches: [ "main" ]

jobs:
  build:
    ## 셀프호스팅 러너 사용 (GitHub 호스트 대신 사용자 인프라 사용)
    runs-on: self-hosted

    steps:
      ## 저장소 코드 체크아웃 (필수 초기 단계)
      - uses: actions/checkout@v4  ## 버전 v4의 공식 체크아웃 액션 사용

      ## ubuntu 서버에 java를 설치하기 때문에 필요하지 않다 생각되어 주석
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#        env:
#          JAVA_HOME: ${{ env.JAVA_HOME_21_X64 }}  ## 환경변수 강제 설정
      
      ## java 버전 확인
      - name: Check Java Version
        run: java -version

      ## gradle의 실행권한 부여와 build 수행
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

  deploy:
    runs-on: self-hosted
    needs: [ build ] ## build가 수행되어야만 deploy가 수행
    steps:
      ## 1. 그냥 jar로 application 실행 -----------------------------------------
      ## jar를 사용하기 쉽게 밖으로 복사
#      - name: Deploy Application
#        run: |
#          cp $GITHUB_WORKSPACE/build/libs/github_action.jar /home/ubuntu
#          cp $GITHUB_WORKSPACE/script/run.sh /home/ubuntu

      ## application 실행
      #      - name: Run Application
      #        run: sudo sh /home/ubuntu/run.sh

      ## 2. 각 ubuntu 서버로 jar파일을 복사한 후 각 서버에서 jar로 application 실행 ----------
      ## 도커 컨테이너 끼리 파일 복사하여 이동
#      - name: Deploy Application
#        run: |
#          apps=("app-1" "app-2")
#          for app in ${apps[@]};
#          do
#            echo "컨테이너: $app"
#            sudo docker cp $GITHUB_WORKSPACE/build/libs/github_action.jar $app:/home/ubuntu
#            sudo docker cp $GITHUB_WORKSPACE/script/run.sh $app:/home/ubuntu
#          done

      ## 각 docker container로 보낸 jar를 각 컨테이너에서 실행
#      - name: Run Application
#        run: |
#          apps=("app-1" "app-2")
#          for app in ${apps[@]};
#          do
#            echo "컨테이너: $app"
#            sudo docker exec $app /bin/bash -c "chmod +x ./run.sh && sudo ./run.sh"
#          done
        ## -c 옵션은 Bash쉘에 전달할 명령을 문자열로 지정

      - name: Current Directory
        run: echo $(pwd)

      ## dockerfile로 이미지화 시킨 후 application 실행 ---------------
#      - name: Copy Docker-Compose and DockerFile to Home
#        run: |
#          mkdir ~/workspaces && cd ~/workspaces
#          cp $GITHUB_WORKSPACE/infra/api-docker-compose.yml .
#          cp $GITHUB_WORKSPACE/infra/ApiDockerfile .
#          cp $GITHUB_WORKSPACE/build/libs/github_action.jar .
#
#      - name: Run Application
#        run: |
#          sudo docker compose -f ~/workspaces/api-docker-compose.yml up -d --build