## GitHub Actions 대시보드에 표시될 워크플로 이름
name: EC2 CI/CD
## 실행 시 "Deploy to [대상] by @사용자명" 형식으로 표시
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}

## 트리거 설정 (이벤트 발생 시 워크플로 실행)
on:
  push:
    branches: [ "main", "feature/terraform" ]  ## main 브랜치에 push 이벤트 발생 시 실행
#  pull_request:         ## 주석 해제 시 main 브랜치 PR 이벤트로도 실행
#    branches: [ "main" ]

jobs:
  build:
    ## 셀프호스팅 러너 사용 (GitHub 호스트 대신 사용자 인프라 사용)
    runs-on: ubuntu-latest

    steps:
      ## 저장소 코드 체크아웃 (필수 초기 단계)
      - uses: actions/checkout@v4  ## 버전 v4의 공식 체크아웃 액션 사용

      ## ubuntu 서버에 java를 설치하기 때문에 필요하지 않다 생각되어 주석
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_21_X64 }}  ## 환경변수 강제 설정

      ## java 버전 확인
      - name: Check Java Version
        run: java -version

      ## gradle의 실행권한 부여와 build 수행
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test
      
      ## 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: github_action
          path: |
            build/libs/github_action.jar
            Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ] ## build가 수행되어야만 deploy가 수행
    steps:
      ## 빌드작업한 JAR파일을 아티펙트에서 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: github_action
          path: .

      ## EC2에 배포
      # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
      # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
      - name: SCP JAR file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD }} # EC2 Public IP
          username: ${{ secrets.USER }} # EC2 USERNAME
          key: ${{ secrets.SSH_PRIVATE_KEY }} # EC2 SSH KEY
          source: "./Dockerfile,build/libs/github_action.jar"
          target: "/home/${{ secrets.USER }}"

      - name: Push to ECR
        uses: appleboy/ssh-action@master # github action의 ssh 원격 접속
        with:
          host: ${{ secrets.CICD }} # EC2 Public IP
          username: ${{ secrets.USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker buildx build -t shinemuscat-api:latest -f Dockerfile .
            
            # ecr 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR }}
            
            docker tag shinemuscat-api:latest ${{ secrets.ECR }}:shinemuscat-api
            docker push ${{ secrets.ECR }}:shinemuscat-api

      - name: Pull to ECR and Start Application
        run: |
          apps=("${{ secrets.APP_1 }}" "${{ secrets.APP_2 }}")
          for app in "${apps[@]}"; do
            echo "${{secrets.SSH_PRIVATE_KEY}}" > shinemuscat.pem
            
            ssh -o StrictHostKeyChecking=no -i shinemuscat.pem ${{ secrets.USER }}@$app "
              aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR }} &&
              docker pull ${{ secrets.ECR }}:shinemuscat-api && 
              docker stop api-1 || true && 
              docker rm api-1 || true && 
              docker run -d --name api-1 --env PROFILE=aws -p 8080:8080 shinemuscat-api:latest
            "
          done
          rm -f private_key.pem