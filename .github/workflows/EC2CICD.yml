## GitHub Actions 대시보드에 표시될 워크플로 이름
name: EC2 CI/CD
## 실행 시 "Deploy to [대상] by @사용자명" 형식으로 표시
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}

## 트리거 설정 (이벤트 발생 시 워크플로 실행)
on:
  push:
    branches: [ "main" ]  ## main 브랜치에 push 이벤트 발생 시 실행
#  pull_request:         ## 주석 해제 시 main 브랜치 PR 이벤트로도 실행
#    branches: [ "main" ]

jobs:
  build:
    ## 셀프호스팅 러너 사용 (GitHub 호스트 대신 사용자 인프라 사용)
    runs-on: ubuntu-latest

    steps:
      ## 저장소 코드 체크아웃 (필수 초기 단계)
      - uses: actions/checkout@v4  ## 버전 v4의 공식 체크아웃 액션 사용

      ## ubuntu 서버에 java를 설치하기 때문에 필요하지 않다 생각되어 주석
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_21_X64 }}  ## 환경변수 강제 설정

      ## java 버전 확인
      - name: Check Java Version
        run: java -version

      ## gradle의 실행권한 부여와 build 수행
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test
      
      ## 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: github_action
          path: build/libs/github_action.jar

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ] ## build가 수행되어야만 deploy가 수행
    steps:
      ## 빌드작업한 JAR파일을 아티펙트에서 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: github_action
          path: build/libs/

      ## github runner의 ip를 가져옴
      - name: Get runner IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      ## EC2 보안그룹에 github action runner의 ip 등록 
      - name: Add Ip to security group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      ## EC2에 배포
      # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
      # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
      - name: SCP JAR file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CICD }} # EC2 Public IP
          username: ${{ secrets.USER }} # EC2 USERNAME
          key: ${{ secrets.SSH_PRIVATE_KEY }} # EC2 SSH KEY
          source: "build/libs/github_action.jar,./Dockerfile"
          target: "/home/${{ secrets.USER }}"
#          strip_components: 2

      - name: Send Tar To Service Instances
        uses: appleboy/ssh-action@master # github action의 ssh 원격 접속
        with:
          host: ${{ secrets.CICD }} # EC2 Public IP
          username: ${{ secrets.USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker buildx build -t app_image:latest -f Dockerfile .
            docker save -o AppImage.tar app_image:latest
            
            apps=(${{ secrets.EC2_INSTANCES }})
            for app in "${apps[@]}"; do
              scp -i shinemuscat.pem -o StrictHostKeyChecking=no AppImage.tar ${{secrets.USER}}@${{secrets.app}}:/home/${{secrets.USER}}/AppImage.tar
            done
            echo "Success Copy For Service Instances"

      - name: Start Application
        run: |
          echo "${{secrets.SSH_PRIVATE_KEY}}" > shinemuscat.pem
          ssh -i shinemuscat.pem ${{secrets.USER}}@${{secrets.CICD}}
          
          apps=(${{ secrets.EC2_INSTANCES }})
            for app in "${!apps[@]}"; do
              actual_index=$((index + 1))
              echo 'current pick instance : ' $app
          
              docker load -i AppImage.tar || true
              docker stop api-${actual_index} || true
              docker rm api-${actual_index} || true
              
              docker run -d --name api-${actual_index} --env PROFILE=aws -p $((8080 + actual_index)):8080 app_image:latest"
            done
          
          rm -f private_key.pem

      ## EC2 보안그룹에 github action runner의 ip 삭제
      - name: Remove IP from security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

